//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BioScadaServer.Variables
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Variable", Namespace="http://schemas.datacontract.org/2004/07/BioScadaServer.Variables")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BioScadaServer.Variables.Variable[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(object[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<string, object>>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, object>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(string[]))]   
    public partial class Variable : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string NameField;
        
        private object ValueField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object Value
        {
            get
            {
                return this.ValueField;
            }
            set
            {
                this.ValueField = value;
            }
        }
    }
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(Namespace="BioScadaServer", ConfigurationName="IServer", SessionMode=System.ServiceModel.SessionMode.Required)]
public interface IServer
{
    
    [System.ServiceModel.OperationContractAttribute(Action="BioScadaServer/IServer/Login", ReplyAction="BioScadaServer/IServer/LoginResponse")]
    int Login(string name, string pass);
    
    [System.ServiceModel.OperationContractAttribute(IsTerminating=true, Action="BioScadaServer/IServer/Leave", ReplyAction="BioScadaServer/IServer/LeaveResponse")]
    void Leave();
    
    [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="BioScadaServer/IServer/Start_Experiment", ReplyAction="BioScadaServer/IServer/Start_ExperimentResponse")]
    bool Start_Experiment(string name);
    
    [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="BioScadaServer/IServer/Stop_Experiment", ReplyAction="BioScadaServer/IServer/Stop_ExperimentResponse")]
    bool Stop_Experiment(string name);
    
    [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="BioScadaServer/IServer/GetVariableExperiment", ReplyAction="BioScadaServer/IServer/GetVariableExperimentResponse")]
    BioScadaServer.Variables.Variable[] GetVariableExperiment(string name);
    
    [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="BioScadaServer/IServer/GetAllVariableExperiment", ReplyAction="BioScadaServer/IServer/GetAllVariableExperimentResponse")]
    System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<string, object>> GetAllVariableExperiment();
    
    [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="BioScadaServer/IServer/SetValueVariable", ReplyAction="BioScadaServer/IServer/SetValueVariableResponse")]
    [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BioScadaServer.Variables.Variable))]
    [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BioScadaServer.Variables.Variable[]))]
    [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[]))]
    [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<string, object>>))]
    [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, object>))]
    [System.ServiceModel.ServiceKnownTypeAttribute(typeof(string[]))]
    bool SetValueVariable(string VariableName, object VariableValue, string ExperimentName);
    
    [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="BioScadaServer/IServer/GetAlarms", ReplyAction="BioScadaServer/IServer/GetAlarmsResponse")]
    string[] GetAlarms();
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public interface IServerChannel : IServer, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public partial class ServerClient : System.ServiceModel.ClientBase<IServer>, IServer
{
    
    public ServerClient()
    {
    }
    
    public ServerClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public ServerClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public ServerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public ServerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public int Login(string name, string pass)
    {
        return base.Channel.Login(name, pass);
    }
    
    public void Leave()
    {
        base.Channel.Leave();
    }
    
    public bool Start_Experiment(string name)
    {
        return base.Channel.Start_Experiment(name);
    }
    
    public bool Stop_Experiment(string name)
    {
        return base.Channel.Stop_Experiment(name);
    }
    
    public BioScadaServer.Variables.Variable[] GetVariableExperiment(string name)
    {
        return base.Channel.GetVariableExperiment(name);
    }
    
    public System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<string, object>> GetAllVariableExperiment()
    {
        return base.Channel.GetAllVariableExperiment();
    }
    
    public bool SetValueVariable(string VariableName, object VariableValue, string ExperimentName)
    {
        return base.Channel.SetValueVariable(VariableName, VariableValue, ExperimentName);
    }
    
    public string[] GetAlarms()
    {
        return base.Channel.GetAlarms();
    }
}
